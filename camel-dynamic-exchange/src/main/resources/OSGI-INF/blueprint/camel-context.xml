<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <bean id="dynamicExchanger" class="com.redhat.example.processors.DynamicMessageExchanger" />
    <!--
      The namespace for the camelContext element in Blueprint is 'http://camel.apache.org/schema/blueprint'. Additionally,
      we can also define namespace prefixes we want to use them in the XPath expressions in our CBR.

      While it is not required to assign id's to the <camelContext/> and <route/> elements, it is a good idea
      to set those for runtime management purposes (logging, JMX MBeans, ...)
    -->
    <camelContext xmlns="http://camel.apache.org/schema/blueprint" xmlns:order="http://fabric8.com/examples/order/v7"
        xmlns:order-ref="http://fabric8.com/examples/order-ref/v1" id="jms-example-context">

        <!--
          When this route is started, it will automatically create the work/jms/input directory where you can drop the
          file that need to be processed.

          The <log/> elements are used to add human-friendly business logging statements. They make it easier to see what the
          route is doing.

          Files that are consumed from the work/jms/input directory, are then sent to the JMS queue incomingOrders on the 
          ActiveMQ broker within the ESB.
        -->
        <route id="file-to-jms-route">
            <from uri="file:work/jms/input" />
            <log message="Receiving order-reference ${file:name}" />
            <setHeader headerName="fileLocation">
                <xpath objectModel="http://fabric8.com/examples/order-ref/v1" resultType="java.lang.String">//order-ref:orderref/order-ref:location/text()</xpath>
            </setHeader>
            <log message="File Location: ${header.fileLocation}"/>
            <process ref="dynamicExchanger"/>    
            <log message="Body: ${body}"/>
            <to uri="amq:incomingOrders" />
        </route>

        <!--
          This route consumes messages from the JMS queue incomingOrders on the ActiveMQ broker within the ESB. 
          
          The <setHeader/> element uses xpath to extract a country code from the payload bod and store it into a header 
          on the message.

          The <recipientList/> element contains the content based routing information. The simple expression constructs 
          a file URI dynamically from the header value extracted in the previous operation and uses this URI for routing.
          The files are moved into ./work/jms/output/<country element value> (e.g. US, UK, or BE), based on message content.
        -->
        <route id="jms-cbr-route">
            <from uri="amq:incomingOrders" />
            <setHeader headerName="folder">
                <xpath objectModel="http://fabric8.com/examples/order/v7" resultType="java.lang.String">//order:order/order:customer/order:country/text()</xpath>
            </setHeader>
            <log message="Folder: ${header.folder}"/>
            <recipientList ignoreInvalidEndpoints="true">
                <simple>
                    file:work/jms/output/${header.folder}
                </simple>
            </recipientList>
            <log message="Done processing ${file:name}" />
        </route>
    </camelContext>

</blueprint>