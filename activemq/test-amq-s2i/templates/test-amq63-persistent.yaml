apiVersion: v1
kind: Template
labels:
  template: test-amq63-persistent
message: A new persistent messaging service has been created in your project. It will handle the protocol(s) "${MQ_PROTOCOL}". The username/password for accessing the service is ${MQ_USERNAME}/${MQ_PASSWORD}.
metadata:
  annotations:
    description: Application template for JBoss A-MQ brokers. These can be deployed as standalone and use persistent storage for saving messages, including message migration when the number of pods are reduced. This template doesn't feature SSL support.
    iconClass: icon-jboss
    openshift.io/display-name: Red Hat JBoss A-MQ 6.3 (Persistent, no SSL)
    tags: messaging,amq,jboss,xpaas
    version: '1.1'
  creationTimestamp: null
  name: test-amq63-persistent
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's Prometheus port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-prometheus
  spec:
    ports:
    - name: prometheus
      port: 9779
      targetPort: 9779
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: AMQ_TRANSPORTS
            value: ${MQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${MQ_QUEUES}
          - name: AMQ_TOPICS
            value: ${MQ_TOPICS}
          - name: MQ_SERIALIZABLE_PACKAGES
            value: ${MQ_SERIALIZABLE_PACKAGES}
          - name: AMQ_SPLIT
            value: ${AMQ_SPLIT}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-tcp
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: ${AMQ_STORAGE_USAGE_LIMIT}
          - name: AMQ_QUEUE_MEMORY_LIMIT
            value: ${AMQ_QUEUE_MEMORY_LIMIT}
          - name: JAVA_OPTS_APPEND
            value: -javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=9779:/opt/prometheus/prometheus-config.yml
          image: jboss-amq-63
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqp-ssl
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 8883
            name: mqtt-ssl
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61612
            name: stomp-ssl
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          - containerPort: 61617
            name: tcp-ssl
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
          volumeMounts:
          - mountPath: /opt/amq/data
            name: ${APPLICATION_NAME}-pvol
        terminationGracePeriodSeconds: 60
        volumes:
        - name: ${APPLICATION_NAME}-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-claim
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-drainer
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-drainer
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-drainer
        name: ${APPLICATION_NAME}-drainer
      spec:
        containers:
        - command:
          - /opt/amq/bin/drain.sh
          env:
          - name: AMQ_USER
            value: ${AMQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${AMQ_PASSWORD}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-tcp
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: jboss-amq-63
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-drainer
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          volumeMounts:
          - mountPath: /opt/amq/data
            name: ${APPLICATION_NAME}-pvol
        terminationGracePeriodSeconds: 60
        volumes:
        - name: ${APPLICATION_NAME}-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-claim
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-drainer
        from:
          kind: ImageStreamTag
          name: ${IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-class: glusterfs-storage
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-claim
  spec:
    storageClass: glusterfs-storage
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: test-jboss-amq
- description: Split the data directory for each node in a mesh, this is now the default behaviour.
  displayName: Split Data?
  name: AMQ_SPLIT
  value: 'true'
- description: 'Protocols to configure, separated by commas.  Allowed values are:
    `openwire`, `amqp`, `stomp` and `mqtt`.'
  displayName: A-MQ Protocols
  name: MQ_PROTOCOL
  value: openwire
- description: Queue names, separated by commas.  These queues will be automatically created when the broker starts.  If left empty, queues will be still created dynamically.
  displayName: Queues
  name: MQ_QUEUES
- description: Topic names, separated by commas.  These topics will be automatically created when the broker starts.  If left empty, topics will be still created dynamically.
  displayName: Topics
  name: MQ_TOPICS
- description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
  displayName: A-MQ Serializable Packages
  name: MQ_SERIALIZABLE_PACKAGES
- description: Size of the volume used by A-MQ for persisting messages.
  displayName: A-MQ Volume Size
  name: VOLUME_CAPACITY
  required: true
  value: 10Gi
- description: The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
  displayName: A-MQ Mesh Discovery Type
  name: AMQ_MESH_DISCOVERY_TYPE
  value: kube
- description: The A-MQ storage usage limit
  displayName: A-MQ Storage Limit
  name: AMQ_STORAGE_USAGE_LIMIT
  value: 20 gb
- description: The A-MQ memory usage limit
  displayName: A-MQ Memory Limit
  name: AMQ_QUEUE_MEMORY_LIMIT
  value: 200 mb
- description: Name of the AMQ ImageStream
  displayName: AMQ ImageStream Name
  name: IMAGE_STREAM_NAME
  value: test-jboss-amq
  required: true
- description: Imagestream tag
  displayName: Imagestream tag
  name: IMAGE_STREAM_TAG
  value: latest
  required: true
- description: Namespace in which the Test AMQ ImageStream is located (Leave blank if located in the same namespace)
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
- description: Name of the Secret containing  AMQ loginConfigurations
  displayName: AMQ login Secret Name
  name: login_config_map
  value: login-config-name
  required: true
- description: Username for drainer
  displayName: Username for drainer
  name: AMQ_USERNAME
  required: true
  value: admin
- description: Password for drainer
  displayName: Password for drainer
  name: AMQ_PASSWORD
  required: true
  value: admin
